generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hobbies {
  id              String  @id @default(uuid()) @db.Uuid
  user_id         String  @db.Uuid
  raw_hobbies     String? @db.VarChar(255)
  cleaned_hobbies String? @db.VarChar(255)
  Users           Users   @relation(fields: [user_id], references: [user_id])
}

model Likes {
  like_id   String    @id @default(uuid()) @db.Uuid
  liker_id  String    @db.Uuid
  liked_id  String    @db.Uuid
  timestamp DateTime? @default(now()) @db.Timestamp(0)
  Liker     Users     @relation("Likes_liker_idToUsers", fields: [liker_id], references: [user_id])
  Liked     Users     @relation("Likes_liked_idToUsers", fields: [liked_id], references: [user_id])
}

model Messages {
  message_id  String    @id @default(uuid()) @db.Uuid
  sender_id   String    @db.Uuid
  receiver_id String    @db.Uuid
  content     String
  timestamp   DateTime? @default(now()) @db.Timestamp(0)
  read_status Boolean?  @default(false)
  Sender      Users     @relation("Messages_sender_idToUsers", fields: [sender_id], references: [user_id])
  Receiver    Users     @relation("Messages_receiver_idToUsers", fields: [receiver_id], references: [user_id])
}

model Profiles {
  profile_id            String   @id @default(uuid()) @db.Uuid
  user_id               String   @db.Uuid
  picture_url           String?  @db.VarChar(255)
  video_url             String?  @db.VarChar(255)
  username              String?  @db.VarChar(50)
  name                  String   @db.VarChar(255)
  birthdate             DateTime @db.Date
  gender                String   @db.VarChar(50)
  orientation           String   @db.VarChar(50)
  height_ft             Int
  height_in             Int
  body_type             String?  @db.VarChar(50)
  ethnicity             String?  @db.VarChar(50)
  smokes                Boolean
  drinks                Boolean
  profession            String?  @db.VarChar(255)
  current_location      String?  @db.VarChar(255)
  hometown              String?  @db.VarChar(255)
  bio                   String?
  looking_for           String   @db.VarChar(50)
  age_range_preference  String?  @db.VarChar(50)
  privacy_settings      Json?
  notification_settings Json?
  Users                 Users    @relation(fields: [user_id], references: [user_id])
}

model UserBehavior {
  behavior_id    String    @id @default(uuid()) @db.Uuid
  user_id        String    @db.Uuid
  action_type    String    @db.VarChar(255)
  action_details String
  timestamp      DateTime? @default(now()) @db.Timestamp(0)
  Users          Users     @relation(fields: [user_id], references: [user_id])
}

model Users {
  user_id                              String          @id @default(uuid()) @db.Uuid
  username                             String          @unique @db.VarChar(50)
  email                                String          @unique @db.VarChar(255)
  password_hash                        String          @db.VarChar(255)
  created_at                           DateTime?       @default(now()) @db.Timestamp(0)
  last_login                           DateTime?       @db.Timestamp(0)
  Hobbies                              Hobbies[]
  Likes_Likes_liked_idToUsers          Likes[]         @relation("Likes_liked_idToUsers")
  Likes_Likes_liker_idToUsers          Likes[]         @relation("Likes_liker_idToUsers")
  Messages_Messages_receiver_idToUsers Messages[]      @relation("Messages_receiver_idToUsers")
  Messages_Messages_sender_idToUsers   Messages[]      @relation("Messages_sender_idToUsers")
  Profiles                             Profiles[]
  UserBehavior                         UserBehavior[]
  Notifications                        Notifications[]
}

model Notifications {
  notification_id String   @id @default(uuid()) @db.Uuid
  user_id         String   @db.Uuid
  type            String   @db.VarChar(255)
  message         String   @db.Text
  read            Boolean  @default(false)
  timestamp       DateTime @default(now()) @db.Timestamp(0)
  User            Users    @relation(fields: [user_id], references: [user_id])

  @@map("notifications")
}
